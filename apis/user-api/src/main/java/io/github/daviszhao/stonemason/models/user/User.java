/*
 * This file is generated by jOOQ.
 */
package io.github.daviszhao.stonemason.models.user;


import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import io.github.daviszhao.stonemason.models.base.BaseModel;

import javax.annotation.Generated;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import java.time.LocalDateTime;
import java.util.UUID;

import static org.apache.commons.codec.digest.DigestUtils.md5Hex;


/**
 * 用户表
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.9.6"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class User extends BaseModel {

    private static final long serialVersionUID = 902957026;

    private Integer id;
    private String username;
    @JsonIgnore
    private String password;
    private String salt;
    private Boolean locked;
    @JsonFormat(pattern = DATETIME_FORMAT)
    private LocalDateTime createtime;

    public User() {
    }

    public User(User value) {
        this.id = value.id;
        this.username = value.username;
        this.password = value.password;
        this.salt = value.salt;
        this.locked = value.locked;
        this.createtime = value.createtime;
        this.version = value.version;
    }

    public User(
            Integer id,
            String username,
            String password,
            String salt,
            Boolean locked,
            LocalDateTime createtime,
            Integer version
    ) {
        this.id = id;
        this.username = username;
        this.password = password;
        this.salt = salt;
        this.locked = locked;
        this.createtime = createtime;
        this.version = version;
    }

    public User(String userName, String password) {
        this.setUsername(userName);
        String salt = UUID.randomUUID().toString();
        this.setSalt(salt);
        this.setPassword(encryptPassword(password, salt));
        this.setCreatetime(LocalDateTime.now());
        this.version = 1;
        this.locked = false;

    }

    public static String encryptPassword(String password, String salt) {
        return md5Hex(md5Hex(password + salt) + salt);
    }

    @NotNull
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @NotNull
    @Size(max = 50)
    public String getUsername() {
        return this.username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    @NotNull
    @Size(max = 50)
    public String getPassword() {
        return this.password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    @NotNull
    @Size(max = 100)
    public String getSalt() {
        return this.salt;
    }

    public void setSalt(String salt) {
        this.salt = salt;
    }

    public Boolean getLocked() {
        return this.locked;
    }

    public void setLocked(Boolean locked) {
        this.locked = locked;
    }

    @NotNull
    public LocalDateTime getCreatetime() {
        return this.createtime;
    }

    public void setCreatetime(LocalDateTime createtime) {
        this.createtime = createtime;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final User other = (User) obj;
        if (id == null) {
            if (other.id != null)
                return false;
        } else if (!id.equals(other.id))
            return false;
        if (username == null) {
            if (other.username != null)
                return false;
        } else if (!username.equals(other.username))
            return false;
        if (password == null) {
            if (other.password != null)
                return false;
        } else if (!password.equals(other.password))
            return false;
        if (salt == null) {
            if (other.salt != null)
                return false;
        } else if (!salt.equals(other.salt))
            return false;
        if (locked == null) {
            if (other.locked != null)
                return false;
        } else if (!locked.equals(other.locked))
            return false;
        if (createtime == null) {
            if (other.createtime != null)
                return false;
        } else if (!createtime.equals(other.createtime))
            return false;
        if (version == null) {
            if (other.version != null)
                return false;
        } else if (!version.equals(other.version))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.username == null) ? 0 : this.username.hashCode());
        result = prime * result + ((this.password == null) ? 0 : this.password.hashCode());
        result = prime * result + ((this.salt == null) ? 0 : this.salt.hashCode());
        result = prime * result + ((this.locked == null) ? 0 : this.locked.hashCode());
        result = prime * result + ((this.createtime == null) ? 0 : this.createtime.hashCode());
        result = prime * result + ((this.version == null) ? 0 : this.version.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("User (");

        sb.append(id);
        sb.append(", ").append(username);
        sb.append(", ").append(password);
        sb.append(", ").append(salt);
        sb.append(", ").append(locked);
        sb.append(", ").append(createtime);
        sb.append(", ").append(version);

        sb.append(")");
        return sb.toString();
    }
}
