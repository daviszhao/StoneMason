package io.github.daviszhao.stonemason.db.event.tables.daos;


import io.github.daviszhao.stonemason.busEvent.constants.AskEventStatus;
import io.github.daviszhao.stonemason.busEvent.constants.ProcessStatus;
import io.github.daviszhao.stonemason.busEvent.payloads.EventPayload;
import io.github.daviszhao.stonemason.db.base.daos.AbstractDao;
import io.github.daviszhao.stonemason.db.event.tables.AskRequstEventPublishTable;
import io.github.daviszhao.stonemason.db.event.tables.records.AskRequstEventPublishRecord;
import io.github.daviszhao.stonemason.models.event.AskRequstEventPublish;
import org.jooq.Configuration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import javax.annotation.Generated;
import java.util.Collections;
import java.util.List;


@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.9.6"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
@Repository
public class AskRequstEventPublishDao extends AbstractDao<AskRequstEventPublishRecord, AskRequstEventPublish, Integer> {

    /**
     * Create a new AskRequstEventPublishDao without any configuration
     */
    public AskRequstEventPublishDao() {
        super(AskRequstEventPublishTable.askRequstEventPublish, AskRequstEventPublish.class);
    }

    /**
     * Create a new AskRequstEventPublishDao with an attached configuration
     */
    @Autowired
    public AskRequstEventPublishDao(Configuration configuration) {
        super(AskRequstEventPublishTable.askRequstEventPublish, AskRequstEventPublish.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Integer getId(AskRequstEventPublish object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<AskRequstEventPublish> fetchById(Integer... values) {
        return fetch(AskRequstEventPublishTable.askRequstEventPublish.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public AskRequstEventPublish fetchOneById(Integer value) {
        return fetchOne(AskRequstEventPublishTable.askRequstEventPublish.ID, value);
    }

    /**
     * Fetch records that have <code>payload IN (values)</code>
     */
    public List<AskRequstEventPublish> fetchByPayload(EventPayload... values) {
        return fetch(AskRequstEventPublishTable.askRequstEventPublish.PAYLOAD, values);
    }

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    public List<AskRequstEventPublish> fetchByStatus(ProcessStatus... values) {
        return fetch(AskRequstEventPublishTable.askRequstEventPublish.STATUS, values);
    }

    /**
     * Fetch records that have <code>eventId IN (values)</code>
     */
    public List<AskRequstEventPublish> fetchByEventid(String... values) {
        return fetch(AskRequstEventPublishTable.askRequstEventPublish.EVENTID, values);
    }

    /**
     * Fetch a unique record that has <code>eventId = value</code>
     */
    public AskRequstEventPublish fetchOneByEventid(String value) {
        return fetchOne(AskRequstEventPublishTable.askRequstEventPublish.EVENTID, value);
    }

    /**
     * Fetch records that have <code>askEventStatus IN (values)</code>
     */
    public List<AskRequstEventPublish> fetchByAskeventstatus(AskEventStatus... values) {
        return fetch(AskRequstEventPublishTable.askRequstEventPublish.ASKEVENTSTATUS, values);
    }

    /**
     * Fetch records that have <code>watchId IN (values)</code>
     */
    public List<AskRequstEventPublish> fetchByWatchid(Integer... values) {
        return fetch(AskRequstEventPublishTable.askRequstEventPublish.WATCHID, values);
    }

    /**
     * Fetch records that have <code>eventType IN (values)</code>
     */
    public List<AskRequstEventPublish> fetchByEventtype(String... values) {
        return fetch(AskRequstEventPublishTable.askRequstEventPublish.EVENTTYPE, values);
    }

    /**
     * Fetch records that have <code>version IN (values)</code>
     */
    public List<AskRequstEventPublish> fetchByVersion(Integer... values) {
        return fetch(AskRequstEventPublishTable.askRequstEventPublish.VERSION, values);
    }

    public List<AskRequstEventPublish> fetchByEventid(List<String> eventIds) {
        if (eventIds == null || eventIds.size() == 0) return Collections.emptyList();
        return fetchByEventid(eventIds.toArray(new String[0]));
    }
}
