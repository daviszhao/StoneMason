/*
 * This file is generated by jOOQ.
 */
package io.github.daviszhao.stonemason.db.event.tables;


import io.github.daviszhao.stonemason.busEvent.constants.EventCategory;
import io.github.daviszhao.stonemason.busEvent.constants.ProcessStatus;
import io.github.daviszhao.stonemason.db.event.Keys;
import io.github.daviszhao.stonemason.db.event.tables.records.EventProcessRecord;
import org.jooq.*;
import org.jooq.impl.EnumConverter;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.9.6"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class EventProcessTable extends TableImpl<EventProcessRecord> {

    /**
     * The reference instance of <code>user.t_event_process</code>
     */
    public static final EventProcessTable EVENT_PROCESS = new EventProcessTable();
    private static final long serialVersionUID = 1981840561;
    /**
     * The column <code>user.t_event_process.id</code>.
     */
    public final TableField<EventProcessRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");
    /**
     * The column <code>user.t_event_process.payload</code>. 携带的数据
     */
    public final TableField<EventProcessRecord, String> PAYLOAD = createField("payload", org.jooq.impl.SQLDataType.CLOB, this, "携带的数据");
    /**
     * The column <code>user.t_event_process.status</code>. 'NEW','PROCESSED','IGNORE'
     */
    public final TableField<EventProcessRecord, ProcessStatus> STATUS = createField("status", org.jooq.impl.SQLDataType.VARCHAR.length(20).nullable(false).defaultValue(org.jooq.impl.DSL.inline("NEW", org.jooq.impl.SQLDataType.VARCHAR)), this, "'NEW','PROCESSED','IGNORE'", new EnumConverter<>(String.class, ProcessStatus.class));
    /**
     * The column <code>user.t_event_process.eventCategory</code>. 'NOTIFY','ASK','REVOKE','ASKRESP'
     */
    public final TableField<EventProcessRecord, EventCategory> EVENTCATEGORY = createField("eventCategory", org.jooq.impl.SQLDataType.VARCHAR.length(20).nullable(false), this, "'NOTIFY','ASK','REVOKE','ASKRESP'", new EnumConverter<>(String.class, EventCategory.class));
    /**
     * The column <code>user.t_event_process.eventId</code>.
     */
    public final TableField<EventProcessRecord, String> EVENTID = createField("eventId", org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "");
    /**
     * The column <code>user.t_event_process.eventType</code>.
     */
    public final TableField<EventProcessRecord, String> EVENTTYPE = createField("eventType", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, "");
    /**
     * The column <code>user.t_event_process.version</code>.
     */
    public final TableField<EventProcessRecord, Integer> VERSION = createField("version", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");
    public final TableField<EventProcessRecord, LocalDateTime> CREATETIME = createField("createTime", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");
    public final TableField<EventProcessRecord, LocalDateTime> UPDATETIME = createField("updateTime", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * Create a <code>user.t_event_process</code> table reference
     */
    public EventProcessTable() {
        this("t_event_process", null);
    }

    /**
     * Create an aliased <code>user.t_event_process</code> table reference
     */
    public EventProcessTable(String alias) {
        this(alias, EVENT_PROCESS);
    }

    private EventProcessTable(String alias, Table<EventProcessRecord> aliased) {
        this(alias, aliased, null);
    }

    private EventProcessTable(String alias, Table<EventProcessRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EventProcessRecord> getRecordType() {
        return EventProcessRecord.class;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<EventProcessRecord, Integer> getIdentity() {
        return Keys.IDENTITY_eventProcess;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<EventProcessRecord> getPrimaryKey() {
        return Keys.KEY_T_EVENT_PROCESS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<EventProcessRecord>> getKeys() {
        return Arrays.<UniqueKey<EventProcessRecord>>asList(Keys.KEY_T_EVENT_PROCESS_PRIMARY, Keys.KEY_T_EVENT_PROCESS_EVENTID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EventProcessTable as(String alias) {
        return new EventProcessTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EventProcessTable rename(String name) {
        return new EventProcessTable(name, null);
    }
}
