/*
 * This file is generated by jOOQ.
 */
package io.github.daviszhao.stonemason.db.event.tables;


import io.github.daviszhao.stonemason.db.event.Keys;
import io.github.daviszhao.stonemason.db.event.tables.records.AskRequstEventPublishRecord;
import org.jooq.*;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.9.6"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class AskRequstEventPublishTable extends TableImpl<AskRequstEventPublishRecord> {

    /**
     * The reference instance of <code>user.t_ask_requst_event_publish</code>
     */
    public static final AskRequstEventPublishTable askRequstEventPublish = new AskRequstEventPublishTable();
    private static final long serialVersionUID = 343165085;
    /**
     * The column <code>user.t_ask_requst_event_publish.id</code>.
     */
    public final TableField<AskRequstEventPublishRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");
    /**
     * The column <code>user.t_ask_requst_event_publish.payload</code>.
     */
    public final TableField<AskRequstEventPublishRecord, String> PAYLOAD = createField("payload", org.jooq.impl.SQLDataType.CLOB, this, "");
    /**
     * The column <code>user.t_ask_requst_event_publish.status</code>. 'NEW','PROCESSED','IGNORE'
     */
    public final TableField<AskRequstEventPublishRecord, String> STATUS = createField("status", org.jooq.impl.SQLDataType.VARCHAR.length(20).nullable(false).defaultValue(org.jooq.impl.DSL.inline("NEW", org.jooq.impl.SQLDataType.VARCHAR)), this, "'NEW','PROCESSED','IGNORE'");
    /**
     * The column <code>user.t_ask_requst_event_publish.eventId</code>.
     */
    public final TableField<AskRequstEventPublishRecord, String> EVENTID = createField("eventId", org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "");
    /**
     * The column <code>user.t_ask_requst_event_publish.askEventStatus</code>. 'PENDING','TIMEOUT','FAILED','SUCCESS','CANCELLED'
     */
    public final TableField<AskRequstEventPublishRecord, String> ASKEVENTSTATUS = createField("askEventStatus", org.jooq.impl.SQLDataType.VARCHAR.length(20), this, "'PENDING','TIMEOUT','FAILED','SUCCESS','CANCELLED'");
    /**
     * The column <code>user.t_ask_requst_event_publish.watchId</code>.
     */
    public final TableField<AskRequstEventPublishRecord, Integer> WATCHID = createField("watchId", org.jooq.impl.SQLDataType.INTEGER, this, "");
    /**
     * The column <code>user.t_ask_requst_event_publish.eventType</code>.
     */
    public final TableField<AskRequstEventPublishRecord, String> EVENTTYPE = createField("eventType", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, "");
    /**
     * The column <code>user.t_ask_requst_event_publish.version</code>.
     */
    public final TableField<AskRequstEventPublishRecord, Integer> VERSION = createField("version", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * Create a <code>user.t_ask_requst_event_publish</code> table reference
     */
    public AskRequstEventPublishTable() {
        this("t_ask_requst_event_publish", null);
    }

    /**
     * Create an aliased <code>user.t_ask_requst_event_publish</code> table reference
     */
    public AskRequstEventPublishTable(String alias) {
        this(alias, askRequstEventPublish);
    }

    private AskRequstEventPublishTable(String alias, Table<AskRequstEventPublishRecord> aliased) {
        this(alias, aliased, null);
    }

    private AskRequstEventPublishTable(String alias, Table<AskRequstEventPublishRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AskRequstEventPublishRecord> getRecordType() {
        return AskRequstEventPublishRecord.class;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AskRequstEventPublishRecord, Integer> getIdentity() {
        return Keys.IDENTITY_askRequstEventPublish;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AskRequstEventPublishRecord> getPrimaryKey() {
        return Keys.KEY_T_ASK_REQUST_EVENT_PUBLISH_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AskRequstEventPublishRecord>> getKeys() {
        return Arrays.<UniqueKey<AskRequstEventPublishRecord>>asList(Keys.KEY_T_ASK_REQUST_EVENT_PUBLISH_PRIMARY, Keys.KEY_T_ASK_REQUST_EVENT_PUBLISH_UK_ASKREQ__PUBLISH_EVENTID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AskRequstEventPublishTable as(String alias) {
        return new AskRequstEventPublishTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AskRequstEventPublishTable rename(String name) {
        return new AskRequstEventPublishTable(name, null);
    }
}
