package io.github.daviszhao.stonemason.db.event.tables.daos;


import io.github.daviszhao.stonemason.busEvent.constants.AskEventStatus;
import io.github.daviszhao.stonemason.busEvent.payloads.ExtraParams;
import io.github.daviszhao.stonemason.db.base.daos.AbstractDao;
import io.github.daviszhao.stonemason.db.event.tables.EventWatchTable;
import io.github.daviszhao.stonemason.db.event.tables.records.EventWatchRecord;
import io.github.daviszhao.stonemason.models.event.EventWatch;
import org.jooq.Configuration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import javax.annotation.Generated;
import java.time.LocalDateTime;
import java.util.List;


@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.9.6"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
@Repository
public class EventWatchDao extends AbstractDao<EventWatchRecord, EventWatch, Integer> {

    private EventWatchTable table;

    /**
     * Create a new EventWatchDao without any configuration
     */
    public EventWatchDao() {
        super(EventWatchTable.EVENT_WATCH, EventWatch.class);
    }

    /**
     * Create a new EventWatchDao with an attached configuration
     */
    @Autowired
    public EventWatchDao(Configuration configuration) {
        super(EventWatchTable.EVENT_WATCH, EventWatch.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Integer getId(EventWatch object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<EventWatch> fetchById(Integer... values) {
        return fetch(EventWatchTable.EVENT_WATCH.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public EventWatch fetchOneById(Integer value) {
        return fetchOne(EventWatchTable.EVENT_WATCH.ID, value);
    }

    /**
     * Fetch records that have <code>extraParams IN (values)</code>
     */
    public List<EventWatch> fetchByExtraparams(ExtraParams... values) {
        return fetch(EventWatchTable.EVENT_WATCH.EXTRAPARAMS, values);
    }

    /**
     * Fetch records that have <code>askEventIds IN (values)</code>
     */
    public List<EventWatch> fetchByAskeventids(String... values) {
        return fetch(EventWatchTable.EVENT_WATCH.ASKEVENTIDS, values);
    }

    /**
     * Fetch records that have <code>callbackClass IN (values)</code>
     */
    public List<EventWatch> fetchByCallbackclass(String... values) {
        return fetch(EventWatchTable.EVENT_WATCH.CALLBACKCLASS, values);
    }

    /**
     * Fetch records that have <code>united IN (values)</code>
     */
    public List<EventWatch> fetchByUnited(Boolean... values) {
        return fetch(EventWatchTable.EVENT_WATCH.UNITED, values);
    }

    /**
     * Fetch records that have <code>askEventStatus IN (values)</code>
     */
    public List<EventWatch> fetchByAskeventstatus(AskEventStatus... values) {
        return fetch(EventWatchTable.EVENT_WATCH.ASKEVENTSTATUS, values);
    }

    /**
     * Fetch records that have <code>timeoutTime IN (values)</code>
     */
    public List<EventWatch> fetchByTimeouttime(LocalDateTime... values) {
        return fetch(EventWatchTable.EVENT_WATCH.TIMEOUTTIME, values);
    }

    /**
     * Fetch records that have <code>version IN (values)</code>
     */
    public List<EventWatch> fetchByVersion(Integer... values) {
        table = EventWatchTable.EVENT_WATCH;
        return fetch(table.VERSION, values);
    }

    public List<EventWatch> findByAskEventStatusAndTimeoutTimeBefore(AskEventStatus status, LocalDateTime time) {
        return context().selectFrom(table).where(
                table.ASKEVENTSTATUS.eq(status), table.TIMEOUTTIME.lt(time)
        ).orderBy(table.CREATETIME.desc()).fetch()
                .map(mapper());
    }
}
