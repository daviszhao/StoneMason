/*
 * This file is generated by jOOQ.
 */
package io.github.daviszhao.stonemason.db.event.tables.records;


import io.github.daviszhao.stonemason.busEvent.constants.AskEventStatus;
import io.github.daviszhao.stonemason.db.event.tables.EventWatchTable;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;

import javax.annotation.Generated;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import java.time.LocalDateTime;


@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.9.6"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class EventWatchRecord extends UpdatableRecordImpl<EventWatchRecord> implements Record8<Integer, String, String, String, Boolean, AskEventStatus, LocalDateTime, Integer> {

    private static final long serialVersionUID = -90887594;

    /**
     * Create a detached EventWatchRecord
     */
    public EventWatchRecord() {
        super(EventWatchTable.eventWatch);
    }

    /**
     * Create a detached, initialised EventWatchRecord
     */
    public EventWatchRecord(Integer id, String extraparams, String askeventids, String callbackclass, Boolean united, String askeventstatus, LocalDateTime timeouttime, Integer version) {
        super(EventWatchTable.eventWatch);

        set(0, id);
        set(1, extraparams);
        set(2, askeventids);
        set(3, callbackclass);
        set(4, united);
        set(5, askeventstatus);
        set(6, timeouttime);
        set(7, version);
    }

    /**
     * Getter for <code>user.t_event_watch.id</code>.
     */
    @NotNull
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>user.t_event_watch.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>user.t_event_watch.extraParams</code>.
     */
    @Size(max = 65535)
    public String getExtraparams() {
        return (String) get(1);
    }

    /**
     * Setter for <code>user.t_event_watch.extraParams</code>.
     */
    public void setExtraparams(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>user.t_event_watch.askEventIds</code>.
     */
    @Size(max = 255)
    public String getAskeventids() {
        return (String) get(2);
    }

    /**
     * Setter for <code>user.t_event_watch.askEventIds</code>.
     */
    public void setAskeventids(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>user.t_event_watch.callbackClass</code>.
     */
    @Size(max = 255)
    public String getCallbackclass() {
        return (String) get(3);
    }

    /**
     * Setter for <code>user.t_event_watch.callbackClass</code>.
     */
    public void setCallbackclass(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>user.t_event_watch.united</code>.
     */
    @NotNull
    public Boolean getUnited() {
        return (Boolean) get(4);
    }

    /**
     * Setter for <code>user.t_event_watch.united</code>.
     */
    public void setUnited(Boolean value) {
        set(4, value);
    }

    /**
     * Getter for <code>user.t_event_watch.askEventStatus</code>. 'PENDING','TIMEOUT','FAILED','SUCCESS','CANCELLED'
     */
    @Size(max = 20)
    public AskEventStatus getAskeventstatus() {
        return (AskEventStatus) get(5);
    }

    /**
     * Setter for <code>user.t_event_watch.askEventStatus</code>. 'PENDING','TIMEOUT','FAILED','SUCCESS','CANCELLED'
     */
    public void setAskeventstatus(AskEventStatus value) {
        set(5, value);
    }

    /**
     * Getter for <code>user.t_event_watch.timeoutTime</code>.
     */
    public LocalDateTime getTimeouttime() {
        return (LocalDateTime) get(6);
    }

    /**
     * Setter for <code>user.t_event_watch.timeoutTime</code>.
     */
    public void setTimeouttime(LocalDateTime value) {
        set(6, value);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * Getter for <code>user.t_event_watch.version</code>.
     */
    public Integer getVersion() {
        return (Integer) get(7);
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    /**
     * Setter for <code>user.t_event_watch.version</code>.
     */
    public void setVersion(Integer value) {
        set(7, value);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row8<Integer, String, String, String, Boolean, AskEventStatus, LocalDateTime, Integer> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row8<Integer, String, String, String, Boolean, AskEventStatus, LocalDateTime, Integer> valuesRow() {
        return (Row8) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return EventWatchTable.eventWatch.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return EventWatchTable.eventWatch.EXTRAPARAMS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return EventWatchTable.eventWatch.ASKEVENTIDS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return EventWatchTable.eventWatch.CALLBACKCLASS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Boolean> field5() {
        return EventWatchTable.eventWatch.UNITED;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<AskEventStatus> field6() {
        return EventWatchTable.eventWatch.ASKEVENTSTATUS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<LocalDateTime> field7() {
        return EventWatchTable.eventWatch.TIMEOUTTIME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field8() {
        return EventWatchTable.eventWatch.VERSION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getExtraparams();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getAskeventids();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return getCallbackclass();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean value5() {
        return getUnited();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AskEventStatus value6() {
        return getAskeventstatus();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalDateTime value7() {
        return getTimeouttime();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value8() {
        return getVersion();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Record8<Integer, String, String, String, Boolean, AskEventStatus, LocalDateTime, Integer> value1(Integer value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Record8<Integer, String, String, String, Boolean, AskEventStatus, LocalDateTime, Integer> value2(String value) {
        setExtraparams(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Record8<Integer, String, String, String, Boolean, AskEventStatus, LocalDateTime, Integer> value3(String value) {
        setAskeventids(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Record8<Integer, String, String, String, Boolean, AskEventStatus, LocalDateTime, Integer> value4(String value) {
        setCallbackclass(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Record8<Integer, String, String, String, Boolean, AskEventStatus, LocalDateTime, Integer> value5(Boolean value) {
        setUnited(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Record8<Integer, String, String, String, Boolean, AskEventStatus, LocalDateTime, Integer> value6(AskEventStatus value) {
        setAskeventstatus(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Record8<Integer, String, String, String, Boolean, AskEventStatus, LocalDateTime, Integer> value7(LocalDateTime value) {
        setTimeouttime(value);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record8<Integer, String, String, String, Boolean, AskEventStatus, LocalDateTime, Integer> value8(Integer value) {
        setVersion(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Record8<Integer, String, String, String, Boolean, AskEventStatus, LocalDateTime, Integer> values(Integer value1, String value2, String value3, String value4, Boolean value5, AskEventStatus value6, LocalDateTime value7, Integer value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }
}
