/*
 * This file is generated by jOOQ.
 */
package io.github.daviszhao.stonemason.db.event.tables.records;


import io.github.daviszhao.stonemason.busEvent.constants.AskEventStatus;
import io.github.daviszhao.stonemason.busEvent.payloads.ExtraParams;
import io.github.daviszhao.stonemason.db.event.tables.EventWatchTable;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record10;
import org.jooq.Row10;
import org.jooq.impl.UpdatableRecordImpl;

import javax.annotation.Generated;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import java.time.LocalDateTime;


@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.9.6"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class EventWatchRecord extends UpdatableRecordImpl<EventWatchRecord> implements Record10<Integer, ExtraParams, String, String, Boolean, AskEventStatus, LocalDateTime, Integer, LocalDateTime, LocalDateTime> {

    public static final EventWatchTable TABLE = EventWatchTable.EVENT_WATCH;
    private static final long serialVersionUID = -751522362;

    /**
     * Create a detached EventWatchRecord
     */
    public EventWatchRecord() {
        super(TABLE);
    }

    /**
     * Getter for <code>user.t_event_watch.id</code>.
     */
    @NotNull
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Create a detached, initialised EventWatchRecord
     */
    public EventWatchRecord(Integer id, ExtraParams extraparams, String askeventids, String callbackclass, Boolean united, AskEventStatus askeventstatus, LocalDateTime timeouttime, Integer version, LocalDateTime createtime, LocalDateTime updatetime) {
        super(TABLE);

        set(0, id);
        set(1, extraparams);
        set(2, askeventids);
        set(3, callbackclass);
        set(4, united);
        set(5, askeventstatus);
        set(6, timeouttime);
        set(7, version);
        set(8, createtime);
        set(9, updatetime);
    }

    /**
     * Setter for <code>user.t_event_watch.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>user.t_event_watch.extraParams</code>.
     */
    @Size(max = 65535)
    public ExtraParams getExtraparams() {
        return (ExtraParams) get(1);
    }

    /**
     * Getter for <code>user.t_event_watch.askEventIds</code>.
     */
    @Size(max = 255)
    public String getAskeventids() {
        return (String) get(2);
    }

    /**
     * Setter for <code>user.t_event_watch.extraParams</code>.
     */
    public void setExtraparams(ExtraParams value) {
        set(1, value);
    }

    /**
     * Getter for <code>user.t_event_watch.callbackClass</code>.
     */
    @Size(max = 255)
    public String getCallbackclass() {
        return (String) get(3);
    }

    /**
     * Setter for <code>user.t_event_watch.askEventIds</code>.
     */
    public void setAskeventids(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>user.t_event_watch.united</code>.
     */
    @NotNull
    public Boolean getUnited() {
        return (Boolean) get(4);
    }

    /**
     * Setter for <code>user.t_event_watch.callbackClass</code>.
     */
    public void setCallbackclass(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>user.t_event_watch.askEventStatus</code>. 'PENDING','TIMEOUT','FAILED','SUCCESS','CANCELLED'
     */
    @Size(max = 20)
    public AskEventStatus getAskeventstatus() {
        return (AskEventStatus) get(5);
    }

    /**
     * Setter for <code>user.t_event_watch.timeoutTime</code>.
     */
    public void setTimeouttime(LocalDateTime value) {
        set(6, value);
    }

    /**
     * Setter for <code>user.t_event_watch.united</code>.
     */
    public void setUnited(Boolean value) {
        set(4, value);
    }

    /**
     * Setter for <code>user.t_event_watch.askEventStatus</code>. 'PENDING','TIMEOUT','FAILED','SUCCESS','CANCELLED'
     */
    public void setAskeventstatus(AskEventStatus value) {
        set(5, value);
    }

    /**
     * Getter for <code>user.t_event_watch.version</code>.
     */
    public Integer getVersion() {
        return (Integer) get(7);
    }

    /**
     * Getter for <code>user.t_event_watch.timeoutTime</code>.
     */
    public LocalDateTime getTimeouttime() {
        return (LocalDateTime) get(6);
    }

    /**
     * Setter for <code>user.t_event_watch.version</code>.
     */
    public void setVersion(Integer value) {
        set(7, value);
    }

    /**
     * Getter for <code>user.t_event_watch.createTime</code>.
     */
    public LocalDateTime getCreatetime() {
        return (LocalDateTime) get(8);
    }

    /**
     * Setter for <code>user.t_event_watch.createTime</code>.
     */
    public void setCreatetime(LocalDateTime value) {
        set(8, value);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record10 eventType implementation
    // -------------------------------------------------------------------------

    /**
     * Getter for <code>user.t_event_watch.updateTime</code>.
     */
    public LocalDateTime getUpdatetime() {
        return (LocalDateTime) get(9);
    }

    /**
     * Setter for <code>user.t_event_watch.updateTime</code>.
     */
    public void setUpdatetime(LocalDateTime value) {
        set(9, value);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row10<Integer, ExtraParams, String, String, Boolean, AskEventStatus, LocalDateTime, Integer, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row10<Integer, ExtraParams, String, String, Boolean, AskEventStatus, LocalDateTime, Integer, LocalDateTime, LocalDateTime> valuesRow() {
        return (Row10) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return TABLE.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<ExtraParams> field2() {
        return TABLE.EXTRAPARAMS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return TABLE.ASKEVENTIDS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return TABLE.CALLBACKCLASS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Boolean> field5() {
        return TABLE.UNITED;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<AskEventStatus> field6() {
        return TABLE.ASKEVENTSTATUS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<LocalDateTime> field7() {
        return TABLE.TIMEOUTTIME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field8() {
        return TABLE.VERSION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<LocalDateTime> field9() {
        return TABLE.CREATETIME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getAskeventids();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return getCallbackclass();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean value5() {
        return getUnited();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AskEventStatus value6() {
        return getAskeventstatus();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalDateTime value7() {
        return getTimeouttime();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value8() {
        return getVersion();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<LocalDateTime> field10() {
        return TABLE.UPDATETIME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ExtraParams value2() {
        return getExtraparams();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalDateTime value9() {
        return getCreatetime();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalDateTime value10() {
        return getUpdatetime();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EventWatchRecord value1(Integer value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EventWatchRecord value2(ExtraParams value) {
        setExtraparams(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EventWatchRecord value3(String value) {
        setAskeventids(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EventWatchRecord value4(String value) {
        setCallbackclass(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EventWatchRecord value5(Boolean value) {
        setUnited(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EventWatchRecord value6(AskEventStatus value) {
        setAskeventstatus(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EventWatchRecord value7(LocalDateTime value) {
        setTimeouttime(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EventWatchRecord value8(Integer value) {
        setVersion(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EventWatchRecord value9(LocalDateTime value) {
        setCreatetime(value);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public EventWatchRecord value10(LocalDateTime value) {
        setUpdatetime(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EventWatchRecord values(Integer value1, ExtraParams value2, String value3, String value4, Boolean value5, AskEventStatus value6, LocalDateTime value7, Integer value8, LocalDateTime value9, LocalDateTime value10) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        return this;
    }
}
