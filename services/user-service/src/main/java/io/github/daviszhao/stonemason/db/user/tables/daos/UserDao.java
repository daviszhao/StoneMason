/*
 * This file is generated by jOOQ.
 */
package io.github.daviszhao.stonemason.db.user.tables.daos;


import io.github.daviszhao.stonemason.db.daos.base.AbstractDao;
import io.github.daviszhao.stonemason.db.user.tables.records.UserRecord;
import io.github.daviszhao.stonemason.models.user.User;
import org.jooq.Condition;
import org.jooq.Configuration;
import org.springframework.stereotype.Repository;

import javax.annotation.Generated;
import javax.inject.Inject;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

import static io.github.daviszhao.stonemason.db.user.tables.UserTable.table;
import static org.springframework.util.StringUtils.hasText;


/**
 * 用户表
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.9.6"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
@Repository
public class UserDao extends AbstractDao<UserRecord, User, Integer> {

    /**
     * Create a new UserDao without any configuration
     */
    public UserDao() {
        super(table, User.class);
    }


    /**
     * Create a new UserDao with an attached configuration
     */
    @Inject
    public UserDao(Configuration configuration) {
        super(table, User.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Integer getId(User object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>ID IN (values)</code>
     */
    public List<User> fetchById(Integer... values) {
        return fetch(table.ID, values);
    }

    /**
     * Fetch a unique record that has <code>ID = value</code>
     */
    public User fetchOneById(Integer value) {
        return fetchOne(table.ID, value);
    }

    /**
     * Fetch records that have <code>USERNAME IN (values)</code>
     */
    public List<User> fetchByUsername(String... values) {
        return fetch(table.USERNAME, values);
    }

    /**
     * Fetch a unique record that has <code>USERNAME = value</code>
     */
    public User fetchOneByUsername(String value) {
        return fetchOne(table.USERNAME, value);
    }

    /**
     * Fetch records that have <code>PASSWORD IN (values)</code>
     */
    public List<User> fetchByPassword(String... values) {
        return fetch(table.PASSWORD, values);
    }

    /**
     * Fetch records that have <code>SALT IN (values)</code>
     */
    public List<User> fetchBySalt(String... values) {
        return fetch(table.SALT, values);
    }

    /**
     * Fetch a unique record that has <code>SALT = value</code>
     */
    public User fetchOneBySalt(String value) {
        return fetchOne(table.SALT, value);
    }

    /**
     * Fetch records that have <code>LOCKED IN (values)</code>
     */
    public List<User> fetchByLocked(Boolean... values) {
        return fetch(table.LOCKED, values);
    }

    /**
     * Fetch records that have <code>CREATETIME IN (values)</code>
     */
    public List<User> fetchByCreatetime(LocalDateTime... values) {
        return fetch(table.CREATETIME, values);
    }

    /**
     * Fetch records that have <code>VERSION IN (values)</code>
     */
    public List<User> fetchByVersion(Integer... values) {
        return fetch(table.VERSION, values);
    }

    public List<Condition> buildUserCondition(String keyword, Boolean locked) {
        List<Condition> conditionList = new ArrayList<>();
        if (hasText(keyword)) conditionList.add(table.USERNAME.like("%" + keyword + "%"));
        if (locked != null) if (locked) conditionList.add(table.LOCKED.isTrue());
        else conditionList.add(table.LOCKED.isFalse());

        return conditionList;
    }


}
