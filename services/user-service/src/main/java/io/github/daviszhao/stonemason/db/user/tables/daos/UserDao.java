/*
 * This file is generated by jOOQ.
 */
package io.github.daviszhao.stonemason.db.user.tables.daos;


import io.github.daviszhao.stonemason.db.user.tables.UserTable;
import io.github.daviszhao.stonemason.db.user.tables.records.UserRecord;
import io.github.daviszhao.stonemason.models.user.User;
import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import javax.annotation.Generated;
import java.time.LocalDateTime;
import java.util.List;


/**
 * 用户表
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.9.6"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
@Repository
public class UserDao extends DAOImpl<UserRecord, User, Integer> {

    /**
     * Create a new UserDao without any configuration
     */
    public UserDao() {
        super(UserTable.table, User.class);
    }

    /**
     * Create a new UserDao with an attached configuration
     */
    @Autowired
    public UserDao(Configuration configuration) {
        super(UserTable.table, User.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Integer getId(User object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>ID IN (values)</code>
     */
    public List<User> fetchById(Integer... values) {
        return fetch(UserTable.table.ID, values);
    }

    /**
     * Fetch a unique record that has <code>ID = value</code>
     */
    public User fetchOneById(Integer value) {
        return fetchOne(UserTable.table.ID, value);
    }

    /**
     * Fetch records that have <code>USERNAME IN (values)</code>
     */
    public List<User> fetchByUsername(String... values) {
        return fetch(UserTable.table.USERNAME, values);
    }

    /**
     * Fetch a unique record that has <code>USERNAME = value</code>
     */
    public User fetchOneByUsername(String value) {
        return fetchOne(UserTable.table.USERNAME, value);
    }

    /**
     * Fetch records that have <code>PASSWORD IN (values)</code>
     */
    public List<User> fetchByPassword(String... values) {
        return fetch(UserTable.table.PASSWORD, values);
    }

    /**
     * Fetch records that have <code>SALT IN (values)</code>
     */
    public List<User> fetchBySalt(String... values) {
        return fetch(UserTable.table.SALT, values);
    }

    /**
     * Fetch a unique record that has <code>SALT = value</code>
     */
    public User fetchOneBySalt(String value) {
        return fetchOne(UserTable.table.SALT, value);
    }

    /**
     * Fetch records that have <code>LOCKED IN (values)</code>
     */
    public List<User> fetchByLocked(Boolean... values) {
        return fetch(UserTable.table.LOCKED, values);
    }

    /**
     * Fetch records that have <code>CREATETIME IN (values)</code>
     */
    public List<User> fetchByCreatetime(LocalDateTime... values) {
        return fetch(UserTable.table.CREATETIME, values);
    }

    /**
     * Fetch records that have <code>VERSION IN (values)</code>
     */
    public List<User> fetchByVersion(Integer... values) {
        return fetch(UserTable.table.VERSION, values);
    }
}
